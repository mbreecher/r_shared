data = timelog_with_status_df[timelog_with_status_df$Billable %in% 1,], FUN = sum)
billable_hours <- dcast(agg_billable, xbrl_status + form_type ~ monthyear, sum, value.var = "Hours")
names(billable_hours) <- monthyear_to_written(names(billable_hours))
row.names(billable_hours) <- paste(billable_hours$xbrl_status, billable_hours$form_type, sep = " - ")
name_order <- c("DIY - Q","DIY - K","Basic - Q","Basic - K","Full Service - Q","Full Service - K")
billable_hours <- billable_hours[match(name_order, row.names(billable_hours)),]
billable_hours <- billable_hours[,-c(1,2)]
cs_hours_wide <- dcast(agg_non_ps, Service.Type ~ monthyear, sum, value.var = "Hours")
row.names(cs_hours_wide) <- cs_hours_wide$Service.Type
cs_hours_wide <- cs_hours_wide[,!names(cs_hours_wide) %in% "Service.Type"]
names(cs_hours_wide) <- monthyear_to_written(names(cs_hours_wide))
#report goodwill hours separately
agg_goodwill <- aggregate(Hours ~ monthyear +  xbrl_status + form_type,
data = timelog_with_status_df[timelog_with_status_df$Billable %in% 1 &
timelog_with_status_df$Service %in% "Goodwill Hours",],
FUN = sum)
goodwill_hours <- dcast(agg_goodwill, xbrl_status + form_type ~ monthyear, sum, value.var = "Hours")
names(goodwill_hours) <- monthyear_to_written(names(goodwill_hours))
row.names(goodwill_hours) <- paste(goodwill_hours$xbrl_status, "-", goodwill_hours$form_type, "(goodwill)", sep = " ")
name_order <- c("DIY - Q (goodwill)","DIY - K (goodwill)","Basic - Q (goodwill)","Basic - K (goodwill)","Full Service - Q (goodwill)","Full Service - K (goodwill)")
goodwill_hours <- goodwill_hours[match(name_order, row.names(goodwill_hours)),]
goodwill_hours <- goodwill_hours[,-c(1,2)]
#create spacer row and bind billable and goodwill
space <- data.frame(matrix(c(rep.int("",length(billable_hours))),nrow=1,ncol=length(billable_hours)))
names(space) <- names(billable_hours); row.names(space) <- "goodwill portion only"
cs_space <- space; row.names(cs_space) <- "cs time (not included above)"
for(name in names(billable_hours)[!names(billable_hours) %in% names(cs_hours_wide)]){
dummy_df <- c()
for(row in row.names(cs_hours_wide)){
dummy_df <- c(dummy_df, 0)
}
dummy_df <- data.frame(matrix(dummy_df))
row.names(dummy_df) <- row.names(cs_hours_wide)
names(dummy_df) <- name
cs_hours_wide <- cbind(cs_hours_wide, dummy_df)
}
billable_and_goodwill <- rbind(billable_hours, space, goodwill_hours, cs_space, cs_hours_wide)
billable_and_goodwill
#****************** write results to file
setwd("C:/R/workspace/42/output")
write.xlsx(x = billable_and_goodwill, file = "42_data.xlsx",sheetName = "billable_hours", row.names = TRUE)
write.xlsx(x = project_hours, file = "42_data.xlsx",sheetName = "project_hours", row.names = TRUE, append = TRUE)
write.xlsx(x = scheduled_services, file = "42_data.xlsx",sheetName = "scheduled_services", row.names = TRUE, append = TRUE)
write.xlsx(x = count_by_role, file = "42_data.xlsx",sheetName = "count_by_role", row.names = FALSE, append = TRUE)
write.xlsx(x = time_by_role, file = "42_data.xlsx",sheetName = "time_by_role", row.names = FALSE, append = TRUE)
write.xlsx(x = filing_and_customer, file = "42_data.xlsx",sheetName = "customers_and_filings", row.names = TRUE, append = TRUE)
write.xlsx(x = sales_info_wide, file = "42_data.xlsx",sheetName = "net_sales", row.names = TRUE, append = TRUE)
write.xlsx(x = discount_groups_wide, file = "42_data.xlsx",sheetName = "services by discount", row.names = FALSE, append = TRUE)
write.xlsx(x = full_discount_wide, file = "42_data.xlsx",sheetName = "Full discount", row.names = FALSE, append = TRUE)
write.xlsx(x = discount_20_to_99_wide, file = "42_data.xlsx",sheetName = "20-99 discount", row.names = FALSE, append = TRUE)
write.xlsx(x = wide_goodwill_used, file = "42_data.xlsx",sheetName = "Goodwill Hours Used", row.names = FALSE, append = TRUE)
write.xlsx(x = goodwill_balance, file = "42_data.xlsx",sheetName = "Goodwill Balance", row.names = FALSE, append = TRUE)
tapply(billable_hours[billable_hours$Date >= "2014-12-01" & billable_hours$Date <= "2014-12-31" & !is.na(billable_hours$Hours) & !is.na(billable_hours$Date)& billable_hours$Billable %in% 1,]$Hours,billable_hours[billable_hours$Date >= "2014-12-01" & billable_hours$Date <= "2014-12-31" & !is.na(billable_hours$Hours) & !is.na(billable_hours$Date) & billable_hours$Billable %in% 1,]$is_psm, sum)
head(billable_hours)
head(agg_non_ps)
head(non_ps_time)
tapply(non_ps_time[non_ps_time$Date >= "2014-12-01" & non_ps_time$Date <= "2014-12-31" & !is.na(non_ps_time$Hours) & !is.na(non_ps_time$Date)& non_ps_time$Billable %in% 1,]$Hours,non_ps_time[non_ps_time$Date >= "2014-12-01" & non_ps_time$Date <= "2014-12-31" & !is.na(non_ps_time$Hours) & !is.na(non_ps_time$Date) & non_ps_time$Billable %in% 1,]$is_psm, sum)
tapply(non_ps_time[non_ps_time$Date >= "2013-07-01" & non_ps_time$Date <= "2013-07-31" & !is.na(non_ps_time$Hours) & !is.na(non_ps_time$Date)& non_ps_time$Billable %in% 1,]$Hours,non_ps_time[non_ps_time$Date >= "2013-07-01" & non_ps_time$Date <= "2013-07-31" & !is.na(non_ps_time$Hours) & !is.na(non_ps_time$Date) & non_ps_time$Billable %in% 1,]$is_psm, sum)
tapply(non_ps_time[non_ps_time$Date >= "2013-07-01" & non_ps_time$Date <= "2013-07-31" & !is.na(non_ps_time$Hours) & !is.na(non_ps_time$Date)& non_ps_time$Billable %in% 1,]$Hours,non_ps_time[non_ps_time$Date >= "2013-07-01" & non_ps_time$Date <= "2013-07-31" & !is.na(non_ps_time$Hours) & !is.na(non_ps_time$Date) & non_ps_time$Billable %in% 1,]$User, sum)
#////////////////////////////////
# Flat Fee Hours by service level
#////////////////////////////////
project_time <- aggregate(Hours ~ monthyear +  Service.Type + Form.Type,
data = timelog_with_status_df[timelog_with_status_df$Billable %in% 0 & !is.na(timelog_with_status_df$Hours),], FUN = sum)
project_time$header <- paste(project_time$Form.Type, project_time$Service.Type, sep = " ")
groups <- c("10-K Detail Tagging","10-Q Detail Tagging","10-K Full Review","10-Q Full Review","10-K Standard Import","10-Q Standard Import","10-K Full Service Standard Import","10-Q Full Service Standard Import","10-K Maintenance","10-Q Maintenance","K-K Roll Forward","Q-K Roll Forward","Q-Q Roll Forward","K-Q Roll Forward","Q-K Full Service Roll Forward","10-K Full Service Roll Forward","10-Q Full Service Roll Forward", "TM Migration")
project_time[!(project_time$header %in% groups),]$header <- "Other Services"
#cast wide to prepare for rbind
project_hours <- dcast(project_time, header ~ monthyear, sum, value.var = "Hours")
project_hours <- project_hours[match(c(groups, "Other Services"),project_hours$header),]
names(project_hours) <- monthyear_to_written(names(project_hours))
row.names(project_hours) <- c(groups, "Other Services") #use rownames for service names rather than column
project_hours <- project_hours[,-1] #remove name column
project_hours[is.na(project_hours)] <- 0
#////////////////////////////////
# scheduled services by month
#////////////////////////////////
hierarchy <- import_hierarchy() #for some reason, not taking when imported within function
services <- import_services(output = 'expanded')
services <- services[services$filing.estimate > "2013-06-30",]
services$monthyear <- format(services$filing.estimate, format = "%y-%m")
services <- services[order(services$filing.estimate),]
scheduled_by_month <- aggregate(Services.ID ~ monthyear + Service.Type + Form.Type, data = services, FUN = length)
#scheduled_by_month <- scheduled_by_month[!scheduled_by_month$Service.Type %in% c("Migration"),] #remove migrations
scheduled_by_month[scheduled_by_month$Service.Type %in% c("Full Service Roll Forward") & scheduled_by_month$Form.Type %in% c("Q-K", "K-K"),]$Form.Type <- "10-K"
scheduled_by_month$Service.Name <- paste(scheduled_by_month$Form.Type, scheduled_by_month$Service.Type, sep = " ")
name_order <- c("10-K Detail Tagging","10-Q Detail Tagging","10-K Full Review","10-Q Full Review","10-K Standard Import","10-Q Standard Import", "10-K Full Service Standard Import","10-Q Full Service Standard Import","10-K Maintenance","10-Q Maintenance","K-K Roll Forward","Q-K Roll Forward","Q-Q Roll Forward","K-Q Roll Forward","10-K Full Service Roll Forward","10-Q Full Service Roll Forward", "TM Migration")
scheduled_by_month[!scheduled_by_month$Service.Name %in% name_order,]$Service.Name <- "Other Services"
#cast wide to prepare for rbind
scheduled_services <- dcast(scheduled_by_month, Service.Name ~ monthyear, sum, value.var = "Services.ID")
names(scheduled_services) <- monthyear_to_written(names(scheduled_services))
scheduled_services <- scheduled_services[match(c(name_order,"Other Services") , scheduled_services$Service.Name),]
row.names(scheduled_services) <- c(name_order, "Other Services") #use rownames for service names rather than column
scheduled_services <- scheduled_services[,-1] #remove name column
scheduled_services[is.na(scheduled_services)] <- 0
#////////////////////////////////
# Full Time Employees - count
#////////////////////////////////
all_time <- aggregate(Hours ~ monthyear +  role + User , data = timelog_with_status_df, FUN = sum)
count_by_role <- aggregate(Hours ~ monthyear + User + role , data = all_time, FUN = sum)
count_by_role <- ddply(count_by_role, .(monthyear, role), summarise, count = length(unique(User)))
count_by_role <- dcast(count_by_role, role ~ monthyear, sum, value.var = "count")
#count_by_role <- count_by_role[count_by_role$role %in% c("PSM", "PSS", "Sr PSM"),]
names(count_by_role) <- monthyear_to_written(names(count_by_role))
#////////////////////////////////
# Total client time by role
#////////////////////////////////
time_by_role <- aggregate(Hours ~ monthyear +  role , data = all_time, FUN = sum)
time_by_role <- dcast(time_by_role, role ~ monthyear, sum, value.var = "Hours")
#time_by_role <- time_by_role[time_by_role$role %in% c("PSM", "PSS", "Sr PSM"),]
names(time_by_role) <- monthyear_to_written(names(time_by_role))
#////////////////////////////////
# Net discounted sales price
#////////////////////////////////
collapsed_opps <- collapsed_opportunities() # ~2.75 minutes
collapsed_opps <- collapsed_opps[order(collapsed_opps$filing.estimate),]
completed <- unique(services[,names(services) %in% c("Services.ID", "Status")])
collapsed_opps <- merge(collapsed_opps, completed, by = "Services.ID", all.x = T)
#make list price sales price if list price == 0 or na
collapsed_opps[collapsed_opps$List.Price %in% 0 | is.na(collapsed_opps$List.Price),]$List.Price <- collapsed_opps[collapsed_opps$List.Price %in% 0  | is.na(collapsed_opps$List.Price),]$Sales.Price
#make list price sales price if sales price > list
collapsed_opps[collapsed_opps$List.Price < collapsed_opps$Sales.Price,]$List.Price <- collapsed_opps[collapsed_opps$List.Price < collapsed_opps$Sales.Price,]$Sales.Price
#set discount percentages by item
collapsed_opps$discount <- 1 #instantiate field with full discount
collapsed_opps[!collapsed_opps$Sales.Price %in% 0,]$discount <- 1 - (collapsed_opps[!collapsed_opps$Sales.Price %in% 0,]$Sales.Price / collapsed_opps[!collapsed_opps$Sales.Price %in% 0,]$List.Price)
# split projects into historical and future
#historical (completed) projects
sales_info_history <- aggregate(Sales.Price ~ monthyear + Service.Type + Form.Type,
data = collapsed_opps[collapsed_opps$monthyear <= format(Sys.Date(), format = "%y-%m") & collapsed_opps$Status %in% "Completed",], FUN = sum)
sales_info_history$type <- "history"
#future (active or not started) projects
sales_info_predicted <- aggregate(Sales.Price ~ monthyear + Service.Type + Form.Type,
data = collapsed_opps[collapsed_opps$monthyear >= format(Sys.Date(), format = "%y-%m") & !collapsed_opps$Status %in% "Completed",], FUN = sum)
sales_info_predicted$type <- "predicted"
# now combine time
sales_info <- rbind(sales_info_history, sales_info_predicted)
sales_info$header <- paste(sales_info$Form.Type, sales_info$Service.Type, sep = " ")
groups <- c("10-K Detail Tagging","10-Q Detail Tagging","10-K Full Review","10-Q Full Review","10-K Standard Import","10-Q Standard Import","10-K Full Service Standard Import","10-Q Full Service Standard Import","10-K Maintenance","10-Q Maintenance","K-K Roll Forward","Q-K Roll Forward","Q-Q Roll Forward","K-Q Roll Forward","10-K Full Service Roll Forward","10-Q Full Service Roll Forward", "TM Migration")
sales_info[!(sales_info$header %in% groups),]$header <- "Other Services"
sales_info$monthyear_amended <- paste(sales_info$monthyear, sales_info$type, sep = "\n")
#cast wide to prepare for rbind
sales_info_wide <- dcast(sales_info, header ~ monthyear_amended, sum, value.var = "Sales.Price")
sales_info_wide <- sales_info_wide[match(c(groups, "Other Services"),sales_info_wide$header),]
row.names(sales_info_wide) <- c(groups, "Other Services") #use rownames for service names rather than column
names(sales_info_wide) <- monthyear_to_written(names(sales_info_wide))
sales_info_wide <- sales_info_wide[,-1] #remove name column
sales_info_wide[is.na(sales_info_wide)] <- 0
#////////////////////////////////
# Discounted by range
#////////////////////////////////
collapsed_opps$discount.bucket <- "100% Discount" #instantiate with full discount
collapsed_opps[collapsed_opps$discount >= 0 & collapsed_opps$discount <= .01,]$discount.bucket <- "0-1% Discount"
collapsed_opps[collapsed_opps$discount > .01 & collapsed_opps$discount <= .2,]$discount.bucket <- "1.1%-20% Discount"
collapsed_opps[collapsed_opps$discount > .2 & collapsed_opps$discount <= .5,]$discount.bucket <- "20.1%-50% Discount"
collapsed_opps[collapsed_opps$discount > .5 & collapsed_opps$discount <= .75,]$discount.bucket <- "50.1%-75% Discount"
collapsed_opps[collapsed_opps$discount > .75 & collapsed_opps$discount < 1,]$discount.bucket <- "75.1%-99% Discount"
# QA check
# for(each in unique(collapsed_opps$discount.bucket)){
#   print(each)
#   print(min(collapsed_opps[collapsed_opps$discount.bucket %in% each,]$discount))
#   print(max(collapsed_opps[collapsed_opps$discount.bucket %in% each,]$discount))
# }
discount_groups <- aggregate(Services.ID ~ monthyear + discount.bucket, data = collapsed_opps, FUN = length)
#cast wide to prepare for rbind
discount_groups_wide <- dcast(discount_groups, discount.bucket ~ monthyear, sum, value.var = "Services.ID")
names(discount_groups_wide) <- monthyear_to_written(names(discount_groups_wide))
name_order <- c("100% Discount","75.1%-99% Discount","50.1%-75% Discount","20.1%-50% Discount","1.1%-20% Discount","0-1% Discount")
discount_groups_wide <- discount_groups_wide[match(name_order, discount_groups_wide$discount.bucket),]
#////////////////////////////////
# Discounted 100% by type
#////////////////////////////////
full_discount <- aggregate(Services.ID ~ monthyear + Service.Type, data = collapsed_opps[collapsed_opps$discount %in% 1,], FUN = length)
#cast wide to prepare for rbind
full_discount_wide <- dcast(full_discount, Service.Type ~ monthyear, sum, value.var = "Services.ID")
names(full_discount_wide) <- monthyear_to_written(names(full_discount_wide))
#////////////////////////////////
# Discounted 20% - 99% by type
#////////////////////////////////
discount_20_to_99 <- aggregate(Services.ID ~ monthyear + Service.Type, data = collapsed_opps[collapsed_opps$discount >.2 &  collapsed_opps$discount < 1,], FUN = length)
#cast wide to prepare for rbind
discount_20_to_99_wide <- dcast(discount_20_to_99, Service.Type ~ monthyear, sum, value.var = "Services.ID")
names(discount_20_to_99_wide) <- monthyear_to_written(names(discount_20_to_99_wide))
#////////////////////////////////
# Goodwill Hours used by month
#////////////////////////////////
wide_goodwill_used <- dcast(timelog_with_status_df[timelog_with_status_df$Service %in% c("Goodwill Hours"),],Service ~ monthyear, sum, value.var = "Hours" )
names(wide_goodwill_used) <- monthyear_to_written(names(wide_goodwill_used))
#////////////////////////////////
# Goodwill Balance
#////////////////////////////////
unique_customers <- unique(services[!is.na(services$Goodwill.Hours.Available),names(services) %in% c("Account.Name","Goodwill.Hours.Available" )])
goodwill_balance <- data.frame(date = Sys.Date(), goodwill_balance = sum(unique_customers$Goodwill.Hours.Available))
#****************** write results to file
setwd("C:/R/workspace/42/output")
write.xlsx(x = billable_and_goodwill, file = "42_data.xlsx",sheetName = "billable_hours", row.names = TRUE)
write.xlsx(x = project_hours, file = "42_data.xlsx",sheetName = "project_hours", row.names = TRUE, append = TRUE)
write.xlsx(x = scheduled_services, file = "42_data.xlsx",sheetName = "scheduled_services", row.names = TRUE, append = TRUE)
write.xlsx(x = count_by_role, file = "42_data.xlsx",sheetName = "count_by_role", row.names = FALSE, append = TRUE)
write.xlsx(x = time_by_role, file = "42_data.xlsx",sheetName = "time_by_role", row.names = FALSE, append = TRUE)
write.xlsx(x = filing_and_customer, file = "42_data.xlsx",sheetName = "customers_and_filings", row.names = TRUE, append = TRUE)
write.xlsx(x = sales_info_wide, file = "42_data.xlsx",sheetName = "net_sales", row.names = TRUE, append = TRUE)
write.xlsx(x = discount_groups_wide, file = "42_data.xlsx",sheetName = "services by discount", row.names = FALSE, append = TRUE)
write.xlsx(x = full_discount_wide, file = "42_data.xlsx",sheetName = "Full discount", row.names = FALSE, append = TRUE)
write.xlsx(x = discount_20_to_99_wide, file = "42_data.xlsx",sheetName = "20-99 discount", row.names = FALSE, append = TRUE)
write.xlsx(x = wide_goodwill_used, file = "42_data.xlsx",sheetName = "Goodwill Hours Used", row.names = FALSE, append = TRUE)
write.xlsx(x = goodwill_balance, file = "42_data.xlsx",sheetName = "Goodwill Balance", row.names = FALSE, append = TRUE)
proc.time() - start
1422/60
head(timelog_with_status_df)
unique(timelog_with_status_df$role)
timelog_with_status_df[timelog_with_status_df$role %in% c("Sr. PSM"),]$role <- "Sr PSM"
unique(timelog_with_status_df$role)
#manual processing of roles
timelog_with_status_df[timelog_with_status_df$User %in% "Jane Cavanaugh" & timelog_with_status_df$monthyear %in% c("14-09", "14-10", "14-11"),]$role <- "PSS"
timelog_with_status_df[timelog_with_status_df$User.Title %in% "Professional Services Intern",]$role <- "Intern"
timelog_with_status_df[timelog_with_status_df$role %in% c("PSS", "Intern"),]$is_psm <- 1
timelog_with_status_df[timelog_with_status_df$role %in% c("Sr. PSM"),]$role <- "Sr PSM"
#peel off and remove non-ps time
non_ps_time <- timelog_with_status_df[timelog_with_status_df$is_psm %in% 0 | is.na(timelog_with_status_df$is_psm),] #grab 0s and NAs
agg_non_ps <- aggregate(Hours ~ monthyear + Service.Type, data = non_ps_time[non_ps_time$Billable %in% 1,], FUN = sum)
agg_non_ps[agg_non_ps$Service.Type %in% "",]$Service.Type <- "Other"
timelog_with_status_df <- timelog_with_status_df[timelog_with_status_df$is_psm %in% 1,] #remove non-ps time
timelog_with_status_df <- timelog_with_status_df[order(timelog_with_status_df$Date),]
agg_billable <- aggregate(Hours ~ monthyear +  xbrl_status + form_type,
data = timelog_with_status_df[timelog_with_status_df$Billable %in% 1,], FUN = sum)
billable_hours <- dcast(agg_billable, xbrl_status + form_type ~ monthyear, sum, value.var = "Hours")
names(billable_hours) <- monthyear_to_written(names(billable_hours))
row.names(billable_hours) <- paste(billable_hours$xbrl_status, billable_hours$form_type, sep = " - ")
name_order <- c("DIY - Q","DIY - K","Basic - Q","Basic - K","Full Service - Q","Full Service - K")
billable_hours <- billable_hours[match(name_order, row.names(billable_hours)),]
billable_hours <- billable_hours[,-c(1,2)]
cs_hours_wide <- dcast(agg_non_ps, Service.Type ~ monthyear, sum, value.var = "Hours")
row.names(cs_hours_wide) <- cs_hours_wide$Service.Type
cs_hours_wide <- cs_hours_wide[,!names(cs_hours_wide) %in% "Service.Type"]
names(cs_hours_wide) <- monthyear_to_written(names(cs_hours_wide))
#report goodwill hours separately
agg_goodwill <- aggregate(Hours ~ monthyear +  xbrl_status + form_type,
data = timelog_with_status_df[timelog_with_status_df$Billable %in% 1 &
timelog_with_status_df$Service %in% "Goodwill Hours",],
FUN = sum)
goodwill_hours <- dcast(agg_goodwill, xbrl_status + form_type ~ monthyear, sum, value.var = "Hours")
names(goodwill_hours) <- monthyear_to_written(names(goodwill_hours))
row.names(goodwill_hours) <- paste(goodwill_hours$xbrl_status, "-", goodwill_hours$form_type, "(goodwill)", sep = " ")
name_order <- c("DIY - Q (goodwill)","DIY - K (goodwill)","Basic - Q (goodwill)","Basic - K (goodwill)","Full Service - Q (goodwill)","Full Service - K (goodwill)")
goodwill_hours <- goodwill_hours[match(name_order, row.names(goodwill_hours)),]
goodwill_hours <- goodwill_hours[,-c(1,2)]
#create spacer row and bind billable and goodwill
space <- data.frame(matrix(c(rep.int("",length(billable_hours))),nrow=1,ncol=length(billable_hours)))
names(space) <- names(billable_hours); row.names(space) <- "goodwill portion only"
cs_space <- space; row.names(cs_space) <- "cs time (not included above)"
for(name in names(billable_hours)[!names(billable_hours) %in% names(cs_hours_wide)]){
dummy_df <- c()
for(row in row.names(cs_hours_wide)){
dummy_df <- c(dummy_df, 0)
}
dummy_df <- data.frame(matrix(dummy_df))
row.names(dummy_df) <- row.names(cs_hours_wide)
names(dummy_df) <- name
cs_hours_wide <- cbind(cs_hours_wide, dummy_df)
}
billable_and_goodwill <- rbind(billable_hours, space, goodwill_hours, cs_space, cs_hours_wide)
#////////////////////////////////
# Flat Fee Hours by service level
#////////////////////////////////
project_time <- aggregate(Hours ~ monthyear +  Service.Type + Form.Type,
data = timelog_with_status_df[timelog_with_status_df$Billable %in% 0 & !is.na(timelog_with_status_df$Hours),], FUN = sum)
project_time$header <- paste(project_time$Form.Type, project_time$Service.Type, sep = " ")
groups <- c("10-K Detail Tagging","10-Q Detail Tagging","10-K Full Review","10-Q Full Review","10-K Standard Import","10-Q Standard Import","10-K Full Service Standard Import","10-Q Full Service Standard Import","10-K Maintenance","10-Q Maintenance","K-K Roll Forward","Q-K Roll Forward","Q-Q Roll Forward","K-Q Roll Forward","Q-K Full Service Roll Forward","10-K Full Service Roll Forward","10-Q Full Service Roll Forward", "TM Migration")
project_time[!(project_time$header %in% groups),]$header <- "Other Services"
#cast wide to prepare for rbind
project_hours <- dcast(project_time, header ~ monthyear, sum, value.var = "Hours")
project_hours <- project_hours[match(c(groups, "Other Services"),project_hours$header),]
names(project_hours) <- monthyear_to_written(names(project_hours))
row.names(project_hours) <- c(groups, "Other Services") #use rownames for service names rather than column
project_hours <- project_hours[,-1] #remove name column
project_hours[is.na(project_hours)] <- 0
#////////////////////////////////
# scheduled services by month
#////////////////////////////////
hierarchy <- import_hierarchy() #for some reason, not taking when imported within function
services <- import_services(output = 'expanded')
services <- services[services$filing.estimate > "2013-06-30",]
services$monthyear <- format(services$filing.estimate, format = "%y-%m")
services <- services[order(services$filing.estimate),]
scheduled_by_month <- aggregate(Services.ID ~ monthyear + Service.Type + Form.Type, data = services, FUN = length)
#scheduled_by_month <- scheduled_by_month[!scheduled_by_month$Service.Type %in% c("Migration"),] #remove migrations
scheduled_by_month[scheduled_by_month$Service.Type %in% c("Full Service Roll Forward") & scheduled_by_month$Form.Type %in% c("Q-K", "K-K"),]$Form.Type <- "10-K"
scheduled_by_month$Service.Name <- paste(scheduled_by_month$Form.Type, scheduled_by_month$Service.Type, sep = " ")
name_order <- c("10-K Detail Tagging","10-Q Detail Tagging","10-K Full Review","10-Q Full Review","10-K Standard Import","10-Q Standard Import", "10-K Full Service Standard Import","10-Q Full Service Standard Import","10-K Maintenance","10-Q Maintenance","K-K Roll Forward","Q-K Roll Forward","Q-Q Roll Forward","K-Q Roll Forward","10-K Full Service Roll Forward","10-Q Full Service Roll Forward", "TM Migration")
scheduled_by_month[!scheduled_by_month$Service.Name %in% name_order,]$Service.Name <- "Other Services"
#cast wide to prepare for rbind
scheduled_services <- dcast(scheduled_by_month, Service.Name ~ monthyear, sum, value.var = "Services.ID")
names(scheduled_services) <- monthyear_to_written(names(scheduled_services))
scheduled_services <- scheduled_services[match(c(name_order,"Other Services") , scheduled_services$Service.Name),]
row.names(scheduled_services) <- c(name_order, "Other Services") #use rownames for service names rather than column
scheduled_services <- scheduled_services[,-1] #remove name column
scheduled_services[is.na(scheduled_services)] <- 0
#////////////////////////////////
# Full Time Employees - count
#////////////////////////////////
all_time <- aggregate(Hours ~ monthyear +  role + User , data = timelog_with_status_df, FUN = sum)
count_by_role <- aggregate(Hours ~ monthyear + User + role , data = all_time, FUN = sum)
count_by_role <- ddply(count_by_role, .(monthyear, role), summarise, count = length(unique(User)))
count_by_role <- dcast(count_by_role, role ~ monthyear, sum, value.var = "count")
#count_by_role <- count_by_role[count_by_role$role %in% c("PSM", "PSS", "Sr PSM"),]
names(count_by_role) <- monthyear_to_written(names(count_by_role))
#////////////////////////////////
# Total client time by role
#////////////////////////////////
time_by_role <- aggregate(Hours ~ monthyear +  role , data = all_time, FUN = sum)
time_by_role <- dcast(time_by_role, role ~ monthyear, sum, value.var = "Hours")
#time_by_role <- time_by_role[time_by_role$role %in% c("PSM", "PSS", "Sr PSM"),]
names(time_by_role) <- monthyear_to_written(names(time_by_role))
setwd("C:/R/workspace/42/output")
write.xlsx(x = billable_and_goodwill, file = "42_data.xlsx",sheetName = "billable_hours", row.names = TRUE)
write.xlsx(x = project_hours, file = "42_data.xlsx",sheetName = "project_hours", row.names = TRUE, append = TRUE)
write.xlsx(x = scheduled_services, file = "42_data.xlsx",sheetName = "scheduled_services", row.names = TRUE, append = TRUE)
write.xlsx(x = count_by_role, file = "42_data.xlsx",sheetName = "count_by_role", row.names = FALSE, append = TRUE)
write.xlsx(x = time_by_role, file = "42_data.xlsx",sheetName = "time_by_role", row.names = FALSE, append = TRUE)
write.xlsx(x = filing_and_customer, file = "42_data.xlsx",sheetName = "customers_and_filings", row.names = TRUE, append = TRUE)
write.xlsx(x = sales_info_wide, file = "42_data.xlsx",sheetName = "net_sales", row.names = TRUE, append = TRUE)
write.xlsx(x = discount_groups_wide, file = "42_data.xlsx",sheetName = "services by discount", row.names = FALSE, append = TRUE)
write.xlsx(x = full_discount_wide, file = "42_data.xlsx",sheetName = "Full discount", row.names = FALSE, append = TRUE)
write.xlsx(x = discount_20_to_99_wide, file = "42_data.xlsx",sheetName = "20-99 discount", row.names = FALSE, append = TRUE)
write.xlsx(x = wide_goodwill_used, file = "42_data.xlsx",sheetName = "Goodwill Hours Used", row.names = FALSE, append = TRUE)
write.xlsx(x = goodwill_balance, file = "42_data.xlsx",sheetName = "Goodwill Balance", row.names = FALSE, append = TRUE)
timelog_with_status_df[timelog_with_status_df$role %in% c("PSM Team Manager"),]$role <- "TM"
#manual processing of roles
timelog_with_status_df[timelog_with_status_df$User %in% "Jane Cavanaugh" & timelog_with_status_df$monthyear %in% c("14-09", "14-10", "14-11"),]$role <- "PSS"
timelog_with_status_df[timelog_with_status_df$User.Title %in% "Professional Services Intern",]$role <- "Intern"
timelog_with_status_df[timelog_with_status_df$role %in% c("PSS", "Intern"),]$is_psm <- 1
timelog_with_status_df[timelog_with_status_df$role %in% c("Sr. PSM"),]$role <- "Sr PSM"
#peel off and remove non-ps time
non_ps_time <- timelog_with_status_df[timelog_with_status_df$is_psm %in% 0 | is.na(timelog_with_status_df$is_psm),] #grab 0s and NAs
agg_non_ps <- aggregate(Hours ~ monthyear + Service.Type, data = non_ps_time[non_ps_time$Billable %in% 1,], FUN = sum)
agg_non_ps[agg_non_ps$Service.Type %in% "",]$Service.Type <- "Other"
timelog_with_status_df <- timelog_with_status_df[timelog_with_status_df$is_psm %in% 1,] #remove non-ps time
timelog_with_status_df <- timelog_with_status_df[order(timelog_with_status_df$Date),]
agg_billable <- aggregate(Hours ~ monthyear +  xbrl_status + form_type,
data = timelog_with_status_df[timelog_with_status_df$Billable %in% 1,], FUN = sum)
billable_hours <- dcast(agg_billable, xbrl_status + form_type ~ monthyear, sum, value.var = "Hours")
names(billable_hours) <- monthyear_to_written(names(billable_hours))
row.names(billable_hours) <- paste(billable_hours$xbrl_status, billable_hours$form_type, sep = " - ")
name_order <- c("DIY - Q","DIY - K","Basic - Q","Basic - K","Full Service - Q","Full Service - K")
billable_hours <- billable_hours[match(name_order, row.names(billable_hours)),]
billable_hours <- billable_hours[,-c(1,2)]
cs_hours_wide <- dcast(agg_non_ps, Service.Type ~ monthyear, sum, value.var = "Hours")
row.names(cs_hours_wide) <- cs_hours_wide$Service.Type
cs_hours_wide <- cs_hours_wide[,!names(cs_hours_wide) %in% "Service.Type"]
names(cs_hours_wide) <- monthyear_to_written(names(cs_hours_wide))
#report goodwill hours separately
agg_goodwill <- aggregate(Hours ~ monthyear +  xbrl_status + form_type,
data = timelog_with_status_df[timelog_with_status_df$Billable %in% 1 &
timelog_with_status_df$Service %in% "Goodwill Hours",],
FUN = sum)
goodwill_hours <- dcast(agg_goodwill, xbrl_status + form_type ~ monthyear, sum, value.var = "Hours")
names(goodwill_hours) <- monthyear_to_written(names(goodwill_hours))
row.names(goodwill_hours) <- paste(goodwill_hours$xbrl_status, "-", goodwill_hours$form_type, "(goodwill)", sep = " ")
name_order <- c("DIY - Q (goodwill)","DIY - K (goodwill)","Basic - Q (goodwill)","Basic - K (goodwill)","Full Service - Q (goodwill)","Full Service - K (goodwill)")
goodwill_hours <- goodwill_hours[match(name_order, row.names(goodwill_hours)),]
goodwill_hours <- goodwill_hours[,-c(1,2)]
#create spacer row and bind billable and goodwill
space <- data.frame(matrix(c(rep.int("",length(billable_hours))),nrow=1,ncol=length(billable_hours)))
names(space) <- names(billable_hours); row.names(space) <- "goodwill portion only"
cs_space <- space; row.names(cs_space) <- "cs time (not included above)"
for(name in names(billable_hours)[!names(billable_hours) %in% names(cs_hours_wide)]){
dummy_df <- c()
for(row in row.names(cs_hours_wide)){
dummy_df <- c(dummy_df, 0)
}
dummy_df <- data.frame(matrix(dummy_df))
row.names(dummy_df) <- row.names(cs_hours_wide)
names(dummy_df) <- name
cs_hours_wide <- cbind(cs_hours_wide, dummy_df)
}
billable_and_goodwill <- rbind(billable_hours, space, goodwill_hours, cs_space, cs_hours_wide)
#////////////////////////////////
# Flat Fee Hours by service level
#////////////////////////////////
project_time <- aggregate(Hours ~ monthyear +  Service.Type + Form.Type,
data = timelog_with_status_df[timelog_with_status_df$Billable %in% 0 & !is.na(timelog_with_status_df$Hours),], FUN = sum)
project_time$header <- paste(project_time$Form.Type, project_time$Service.Type, sep = " ")
groups <- c("10-K Detail Tagging","10-Q Detail Tagging","10-K Full Review","10-Q Full Review","10-K Standard Import","10-Q Standard Import","10-K Full Service Standard Import","10-Q Full Service Standard Import","10-K Maintenance","10-Q Maintenance","K-K Roll Forward","Q-K Roll Forward","Q-Q Roll Forward","K-Q Roll Forward","Q-K Full Service Roll Forward","10-K Full Service Roll Forward","10-Q Full Service Roll Forward", "TM Migration")
project_time[!(project_time$header %in% groups),]$header <- "Other Services"
#cast wide to prepare for rbind
project_hours <- dcast(project_time, header ~ monthyear, sum, value.var = "Hours")
project_hours <- project_hours[match(c(groups, "Other Services"),project_hours$header),]
names(project_hours) <- monthyear_to_written(names(project_hours))
row.names(project_hours) <- c(groups, "Other Services") #use rownames for service names rather than column
project_hours <- project_hours[,-1] #remove name column
project_hours[is.na(project_hours)] <- 0
#////////////////////////////////
# scheduled services by month
#////////////////////////////////
hierarchy <- import_hierarchy() #for some reason, not taking when imported within function
services <- import_services(output = 'expanded')
services <- services[services$filing.estimate > "2013-06-30",]
services$monthyear <- format(services$filing.estimate, format = "%y-%m")
services <- services[order(services$filing.estimate),]
scheduled_by_month <- aggregate(Services.ID ~ monthyear + Service.Type + Form.Type, data = services, FUN = length)
#scheduled_by_month <- scheduled_by_month[!scheduled_by_month$Service.Type %in% c("Migration"),] #remove migrations
scheduled_by_month[scheduled_by_month$Service.Type %in% c("Full Service Roll Forward") & scheduled_by_month$Form.Type %in% c("Q-K", "K-K"),]$Form.Type <- "10-K"
scheduled_by_month$Service.Name <- paste(scheduled_by_month$Form.Type, scheduled_by_month$Service.Type, sep = " ")
name_order <- c("10-K Detail Tagging","10-Q Detail Tagging","10-K Full Review","10-Q Full Review","10-K Standard Import","10-Q Standard Import", "10-K Full Service Standard Import","10-Q Full Service Standard Import","10-K Maintenance","10-Q Maintenance","K-K Roll Forward","Q-K Roll Forward","Q-Q Roll Forward","K-Q Roll Forward","10-K Full Service Roll Forward","10-Q Full Service Roll Forward", "TM Migration")
scheduled_by_month[!scheduled_by_month$Service.Name %in% name_order,]$Service.Name <- "Other Services"
#cast wide to prepare for rbind
scheduled_services <- dcast(scheduled_by_month, Service.Name ~ monthyear, sum, value.var = "Services.ID")
names(scheduled_services) <- monthyear_to_written(names(scheduled_services))
scheduled_services <- scheduled_services[match(c(name_order,"Other Services") , scheduled_services$Service.Name),]
row.names(scheduled_services) <- c(name_order, "Other Services") #use rownames for service names rather than column
scheduled_services <- scheduled_services[,-1] #remove name column
scheduled_services[is.na(scheduled_services)] <- 0
#////////////////////////////////
# Full Time Employees - count
#////////////////////////////////
all_time <- aggregate(Hours ~ monthyear +  role + User , data = timelog_with_status_df, FUN = sum)
count_by_role <- aggregate(Hours ~ monthyear + User + role , data = all_time, FUN = sum)
count_by_role <- ddply(count_by_role, .(monthyear, role), summarise, count = length(unique(User)))
count_by_role <- dcast(count_by_role, role ~ monthyear, sum, value.var = "count")
#count_by_role <- count_by_role[count_by_role$role %in% c("PSM", "PSS", "Sr PSM"),]
names(count_by_role) <- monthyear_to_written(names(count_by_role))
#////////////////////////////////
# Total client time by role
#////////////////////////////////
time_by_role <- aggregate(Hours ~ monthyear +  role , data = all_time, FUN = sum)
time_by_role <- dcast(time_by_role, role ~ monthyear, sum, value.var = "Hours")
#time_by_role <- time_by_role[time_by_role$role %in% c("PSM", "PSS", "Sr PSM"),]
names(time_by_role) <- monthyear_to_written(names(time_by_role))
setwd("C:/R/workspace/42/output")
write.xlsx(x = billable_and_goodwill, file = "42_data.xlsx",sheetName = "billable_hours", row.names = TRUE)
write.xlsx(x = project_hours, file = "42_data.xlsx",sheetName = "project_hours", row.names = TRUE, append = TRUE)
write.xlsx(x = scheduled_services, file = "42_data.xlsx",sheetName = "scheduled_services", row.names = TRUE, append = TRUE)
write.xlsx(x = count_by_role, file = "42_data.xlsx",sheetName = "count_by_role", row.names = FALSE, append = TRUE)
write.xlsx(x = time_by_role, file = "42_data.xlsx",sheetName = "time_by_role", row.names = FALSE, append = TRUE)
write.xlsx(x = filing_and_customer, file = "42_data.xlsx",sheetName = "customers_and_filings", row.names = TRUE, append = TRUE)
write.xlsx(x = sales_info_wide, file = "42_data.xlsx",sheetName = "net_sales", row.names = TRUE, append = TRUE)
write.xlsx(x = discount_groups_wide, file = "42_data.xlsx",sheetName = "services by discount", row.names = FALSE, append = TRUE)
write.xlsx(x = full_discount_wide, file = "42_data.xlsx",sheetName = "Full discount", row.names = FALSE, append = TRUE)
write.xlsx(x = discount_20_to_99_wide, file = "42_data.xlsx",sheetName = "20-99 discount", row.names = FALSE, append = TRUE)
write.xlsx(x = wide_goodwill_used, file = "42_data.xlsx",sheetName = "Goodwill Hours Used", row.names = FALSE, append = TRUE)
write.xlsx(x = goodwill_balance, file = "42_data.xlsx",sheetName = "Goodwill Balance", row.names = FALSE, append = TRUE)
head(sales_info_history)
head(collapsed_opps)
getwd()
setwd("C:/r/workspace/temp")
write.csv(collapsed_opps, file = "collapsed_opps.csv", row.names  =F)
rm(list = ls())
library(reshape2)
library(plyr)
library(RecordLinkage)
setwd("C:/R/workspace/collapsed_time")
source("collapse_time.R")
setwd("C:/R/workspace/shared")
source("import_functions.R")
setwd('C:/R/workspace/pshistory')
source("recent_filings.R")
#import collapsed time
collapsed_time <- collapsed_time_with_billable()
#cast time as numeric and set NAs to 0s
collapsed_time$Hours <- as.numeric(collapsed_time$Hours); collapsed_time[is.na(collapsed_time$Hours),]$Hours <- 0
collapsed_time$CIK <- as.character(as.numeric(collapsed_time$CIK))
collapsed_time$Billable.Hours <- as.numeric(collapsed_time$Billable.Hours); collapsed_time[is.na(collapsed_time$Billable.Hours),]$Billable.Hours <- 0
collapsed_time$services_count <- as.numeric(collapsed_time$services_count)
collapsed_time$normalized_time <- as.numeric(collapsed_time$normalized_time); collapsed_time[is.na(collapsed_time$normalized_time),]$normalized_time <- 0
# import sec data and sic code
services <- import_services()
sec_data <- import_sec()
recent_filings <- recent_filings(unique(services[,names(services) %in% c("Account.Name", "CIK")]), sec_data )#, flag = "QA")
# recent_filings <- recent_filings[,!names(recent_filings) %in% c("SEC.CIK")]
recent_filings$Match <- as.character(recent_filings$Match) #; recent_filings$SEC.CIK <- as.character(recent_filings$SEC.CIK)
#merge filing data by CIK than by name
result <- merge(collapsed_time, recent_filings, by.x = c("CIK"), by.y = c("Match"), all.x = T)
result <- merge(result, recent_filings, by.x = c("Account.Name"), by.y = c("Match"), all.x = T)
result <- result[!is.na(result$Services.ID) & !is.na(result$Hours),] #only want services with hours
result <- result[result$Service.Type %in% c("Roll Forward", "Full Service Roll Forward"),] #r/f only
setwd("C:/R/workspace/source")
scraped <- read.csv("scraped.csv", header = T, stringsAsFactors = F)
names(scraped) <- c("CIK", "Company.Name", "SIC", "SIC_description")
scraped_simple <- scraped[,names(scraped) %in% c("CIK", "SIC", "SIC_description")]
result <- merge(result, scraped_simple, by = c("CIK"), all.x = T)
result$year <- NA
result[!is.na(result$calendar_quarter_reported),]$year <-
substr(result[!is.na(result$calendar_quarter_reported),]$calendar_quarter_reported, 1 ,4)
#sic category
result$sic_group <- NA
result[result$SIC >=  100 & result$SIC <= 999 & !is.na(result$SIC),]$sic_group <- "Agriculture, Forestry and Fishing"
result[result$SIC >=  1000 & result$SIC <= 1499 & !is.na(result$SIC),]$sic_group <- "Mining"
result[result$SIC >=  1500 & result$SIC <= 1799 & !is.na(result$SIC),]$sic_group <- "Construction"
result[result$SIC >=  2000 & result$SIC <= 3999 & !is.na(result$SIC),]$sic_group <- "Manufacturing"
result[result$SIC >=  4000 & result$SIC <= 4999 & !is.na(result$SIC),]$sic_group <- "Transportation, Communications, Electric, Gas and Sanitary service"
result[result$SIC >=  5000 & result$SIC <= 5199 & !is.na(result$SIC),]$sic_group <- "Wholesale Trade"
result[result$SIC >=  5200 & result$SIC <= 5999 & !is.na(result$SIC),]$sic_group <- "Retail Trade"
result[result$SIC >=  6000 & result$SIC <= 6799 & !is.na(result$SIC),]$sic_group <- "Finance, Insurance and Real Estate"
result[result$SIC == 6798 & !is.na(result$SIC),]$sic_group <- "REITs"
result[result$SIC >=  6000 & result$SIC <= 6099 & !is.na(result$SIC),]$sic_group <- "Banks"
result[result$SIC >=  7000 & result$SIC <= 8999 & !is.na(result$SIC),]$sic_group <- "Services"
result[result$SIC >=  9100 & result$SIC <= 9729 & !is.na(result$SIC),]$sic_group <- "Public Administration"
#plot to show sic_group vs hours
plot1 <- ggplot(result[!is.na(result$sic_group) &!is.na(result$year),]) +
geom_point(aes(x = sic_group, y = Hours, color = factor(year)), size = 4, alpha = .25, position = "jitter") +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
facet_wrap(~Service.Type + Form.Type) +
ggtitle("Roll Forward Projects by industry group, by form, by year")
setwd("C:/R/workspace/Ali/plots")
ggsave('roll_forward_visual_grid.png', plot1, width = 11, height = 8.5)
result$SEC.CIK.x <- as.character(result$SEC.CIK.x); result$SEC.CIK.y <- as.character(result$SEC.CIK.y)
result[is.na(result)] <- ""
setwd('C:/R/workspace/Ali')
write.csv(result, file = "collapsed_time_for_rf_pricing.csv", row.names = F, na = "")
setwd("C:/R/workspace/shared")
source("import_functions.R")
source("transformations.R")
